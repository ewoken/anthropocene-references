{"version":3,"sources":["store/types.js","store/references.js","store/index.js","views/home/HomeView.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["types","uniq","data","map","d","type","typeReducer","arguments","length","undefined","referenceReducer","references","rootReducer","combineReducers","form","formReducer","enhancer","composeWithDevTools","apply","store","createStore","TypeIcon","_ref","react_default","a","createElement","icon","theme","Cover","_ref2","reference","coverUrl","className","src","alt","concat","title","url","startsWith","code","split","frameBorder","allow","allowFullScreen","ReferenceCard","_ref3","href","target","rel","card","hoverable","cover","Meta","avatar","connect","state","referencesSelector","props","list","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","AppLayout","layout","Header","Content","Switch","Route","path","exact","component","home_HomeView","Redirect","to","pathname","App","es","HashRouter","components_AppLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a9a99f8.chunk.js","sourcesContent":["import { uniq } from 'ramda';\nimport data from '../references';\n\nconst types = uniq(data.map(d => d.type));\n\nfunction typeReducer(state = types) {\n  return state;\n}\n\nexport default typeReducer;\n","import references from '../references';\n\nfunction referenceReducer(state = references) {\n  return state;\n}\n\nexport function referencesSelector(state) {\n  return state.references;\n}\n\nexport default referenceReducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { reducer as formReducer } from 'redux-form';\n\nimport typeReducer from './types';\nimport referenceReducer from './references';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  form: formReducer,\n  types: typeReducer,\n  references: referenceReducer,\n});\n\nconst enhancers = [];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { List, Card, Icon } from 'antd';\n\nimport { referencesSelector } from '../../store/references';\n\nfunction TypeIcon({ type }) {\n  switch (type) {\n    case 'VIDEO':\n    case 'CHANNEL':\n      return <Icon type=\"youtube\" theme=\"outlined\" />;\n    case 'MUSIC':\n    case 'PODCAST':\n      return <Icon type=\"customer-service\" theme=\"outlined\" />;\n    case 'BOOK':\n      return <Icon type=\"book\" theme=\"outlined\" />;\n    case 'MOVIE':\n      return <Icon type=\"video-camera\" theme=\"outlined\" />;\n    case 'WEBSITE':\n      return <Icon type=\"global\" theme=\"outlined\" />;\n    case 'PICTURE':\n      return <Icon type=\"picture\" theme=\"outlined\" />;\n    default:\n      return null;\n  }\n}\n\nfunction Cover({ reference }) {\n  if (reference.coverUrl) {\n    return (\n      <img\n        className=\"Cover\"\n        src={reference.coverUrl}\n        alt={`logo of ${reference.title}`}\n      />\n    );\n  }\n\n  if (reference.url && reference.url.startsWith('https://youtu.be/')) {\n    const code = reference.url.split('/')[3];\n    return (\n      <iframe\n        className=\"Cover\"\n        title={`youtube-${code}`}\n        src={`https://www.youtube.com/embed/${code}`}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    );\n  }\n  return <div className=\"Cover\" />;\n}\n\nCover.propTypes = {\n  reference: PropTypes.shape({\n    url: PropTypes.string,\n    coverUrl: PropTypes.string,\n  }).isRequired,\n};\n\nfunction ReferenceCard({ reference }) {\n  return (\n    <div className=\"ReferenceCard\">\n      <a href={reference.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        <Card hoverable cover={<Cover reference={reference} />}>\n          <Card.Meta\n            avatar={<TypeIcon type={reference.type} />}\n            title={reference.title}\n          />\n        </Card>\n      </a>\n    </div>\n  );\n}\nReferenceCard.propTypes = {\n  reference: PropTypes.shape({\n    url: PropTypes.string,\n  }).isRequired,\n};\n\nfunction HomeView(props) {\n  const { references } = props;\n  return (\n    <div className=\"HomeView\">\n      <List\n        grid={{ gutter: 16, xs: 1, sm: 2, md: 4, lg: 4, xl: 4, xxl: 3 }}\n        dataSource={references}\n        renderItem={reference => (\n          <List.Item>\n            <ReferenceCard reference={reference} />\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n}\n\nHomeView.propTypes = {\n  references: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default connect(state => ({\n  references: referencesSelector(state),\n}))(HomeView);\n","import React from 'react';\n\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport HomeView from '../views/home/HomeView';\n\nfunction AppLayout() {\n  return (\n    <div className=\"AppLayout\">\n      <Layout>\n        <Layout.Header>\n          <h1>Références</h1>\n        </Layout.Header>\n        <Layout.Content>\n          <Switch>\n            <Route path=\"/\" exact component={() => <HomeView />} />\n            <Route component={() => <Redirect to={{ pathname: '/' }} />} />\n          </Switch>\n        </Layout.Content>\n        {/* <Layout.Footer>Footer</Layout.Footer> */}\n      </Layout>\n    </div>\n  );\n}\n\nexport default AppLayout;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}